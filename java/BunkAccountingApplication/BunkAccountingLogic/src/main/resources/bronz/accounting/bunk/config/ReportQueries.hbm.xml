<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="fuelsSalesSummary">
		<![CDATA[
SELECT
    DATE_FORMAT(FROM_DAYS(DATES.DATE), '%d %b') AS DATE_TEXT,
    IFNULL(SALES_P.SALE1,0) AS P_SALE,
    IFNULL(SALES_D.SALE,0) AS D_SALE,
    IFNULL(TESTS_P.TEST,0) AS P_TEST,
    IFNULL(TESTS_D.TEST,0) AS D_TEST,
    CLOSING_P.CL_STOCK AS P_CL_STOCK,
    CLOSING_D.CL_STOCK AS D_CL_STOCK
FROM
    (SELECT
        DATES.DATE
    FROM
        PBMS_SETTLEMENTS DATES
    WHERE
        DATES.DATE >= :START
            AND DATES.DATE <= :END) AS DATES
        RIGHT JOIN
    (SELECT
        PX_S.DATE AS S_DATE, SUM(PX_S.QUANTITY) AS SALE1
    FROM
        PBMS_PRODUCT_TRANSACTIONS PX_S
    WHERE
        PX_S.SELL_RECIEVE = 'SALE'
            AND PX_S.PRODUCT_ID = 1
            AND PX_S.DATE >= :START
            AND PX_S.DATE <= :END
    GROUP BY PX_S.DATE) AS SALES_P ON DATES.DATE = SALES_P.S_DATE
        RIGHT JOIN
    (SELECT
        PX_S.DATE AS S_DATE, SUM(PX_S.QUANTITY) AS SALE
    FROM
        PBMS_PRODUCT_TRANSACTIONS PX_S
    WHERE
        PX_S.SELL_RECIEVE = 'SALE'
            AND PX_S.PRODUCT_ID = 2
            AND PX_S.DATE >= :START
            AND PX_S.DATE <= :END
    GROUP BY PX_S.DATE) AS SALES_D ON DATES.DATE = SALES_D.S_DATE
        LEFT OUTER JOIN
    (SELECT
        TX_T.DATE AS T_DATE, SUM(TX_T.QUANTITY) AS TEST
    FROM
        PBMS_TANK_TRANSACTIONS TX_T
    LEFT JOIN PBMS_TANK_TABLE TA ON TA.PK_TANK_ID = TX_T.TANK_ID
    WHERE
        TX_T.TRANS_TYPE = 'TEST'
            AND TA.PRODUCT_ID = 1
            AND TX_T.DATE >= :START
            AND TX_T.DATE <= :END
    GROUP BY TX_T.DATE) AS TESTS_P ON TESTS_P.T_DATE = DATES.DATE
        LEFT OUTER JOIN
    (SELECT
        TX_T.DATE AS T_DATE, SUM(TX_T.QUANTITY) AS TEST
    FROM
        PBMS_TANK_TRANSACTIONS TX_T
    LEFT JOIN PBMS_TANK_TABLE TA ON TA.PK_TANK_ID = TX_T.TANK_ID
    WHERE
        TX_T.TRANS_TYPE = 'TEST'
            AND TA.PRODUCT_ID = 2
            AND TX_T.DATE >= :START
            AND TX_T.DATE <= :END
    GROUP BY TX_T.DATE) AS TESTS_D ON TESTS_D.T_DATE = DATES.DATE
        LEFT OUTER JOIN
    (SELECT
        TA_CL.CL_DATE AS CL_DATE, SUM(TA_TX.BALANCE) AS CL_STOCK
    FROM
        (SELECT
        MAX(TX_CL.PK_SLNO) AS SLNO, TX_CL.DATE AS CL_DATE
    FROM
        PBMS_TANK_TRANSACTIONS TX_CL
    LEFT JOIN PBMS_TANK_TABLE TA ON TA.PK_TANK_ID = TX_CL.TANK_ID
    WHERE
        TA.PRODUCT_ID = 1
            AND TX_CL.DATE >= :START
            AND TX_CL.DATE <= :END
    GROUP BY TX_CL.TANK_ID , TX_CL.DATE) TA_CL
    LEFT JOIN PBMS_TANK_TRANSACTIONS TA_TX ON TA_TX.PK_SLNO = TA_CL.SLNO
    GROUP BY TA_CL.CL_DATE) AS CLOSING_P ON CLOSING_P.CL_DATE = DATES.DATE
		LEFT OUTER JOIN
    (SELECT
        TA_CL.CL_DATE AS CL_DATE, SUM(TA_TX.BALANCE) AS CL_STOCK
    FROM
        (SELECT
        MAX(TX_CL.PK_SLNO) AS SLNO, TX_CL.DATE AS CL_DATE
    FROM
        PBMS_TANK_TRANSACTIONS TX_CL
    LEFT JOIN PBMS_TANK_TABLE TA ON TA.PK_TANK_ID = TX_CL.TANK_ID
    WHERE
        TA.PRODUCT_ID = 2
            AND TX_CL.DATE >= :START
            AND TX_CL.DATE <= :END
    GROUP BY TX_CL.TANK_ID , TX_CL.DATE) TA_CL
    LEFT JOIN PBMS_TANK_TRANSACTIONS TA_TX ON TA_TX.PK_SLNO = TA_CL.SLNO
    GROUP BY TA_CL.CL_DATE) AS CLOSING_D ON CLOSING_D.CL_DATE = DATES.DATE
ORDER BY DATES.DATE
		]]>
    </sql-query>
    <sql-query name="fuelsSalesSummaryV2">
        <![CDATA[
SELECT
    TRX.DATE DATE, DATE_FORMAT(FROM_DAYS(TRX.DATE), '%d %b') AS DATE_TEXT, TRX.ID, TRX.T VALUE, CONCAT(CONVERT(CAST(CONVERT(PT.PRODUCT_NAME USING latin1) AS BINARY) using utf8), " ", TRX.DETAIL) DETAIL
FROM
    (SELECT
        PX_S.DATE AS DATE, PX_S.PRODUCT_ID AS ID, SUM(PX_S.QUANTITY) AS T, 'SALE' AS DETAIL
    FROM
        PBMS_PRODUCT_TRANSACTIONS PX_S
    WHERE
        PX_S.SELL_RECIEVE = 'SALE'
            AND PX_S.PRODUCT_ID > 0 AND PX_S.PRODUCT_ID <5
            AND PX_S.DATE >= :START
            AND PX_S.DATE <= :END
    GROUP BY PX_S.DATE, PX_S.PRODUCT_ID
) AS TRX
    LEFT JOIN PBMS_PRODUCT_TABLE PT ON PT.PK_PRODUCT_ID=TRX.ID
        ]]>
    </sql-query>
    <sql-query name="fuelsTestSummary">
        <![CDATA[
SELECT
    DATES.DATE DATE, DATE_FORMAT(FROM_DAYS(DATES.DATE), '%d-%b') AS DATE_TEXT, TRX.ID, TRX.T VALUE, CONCAT(CONVERT(CAST(CONVERT(PT.PRODUCT_NAME USING latin1) AS BINARY) using utf8), " ", TRX.DETAIL) DETAIL
FROM
    (SELECT
        DATES.DATE
    FROM
        PBMS_SETTLEMENTS DATES
    WHERE
        DATES.DATE >= :START
            AND DATES.DATE <= :END) AS DATES
       LEFT OUTER JOIN
    (
SELECT
        TX_T.DATE AS DATE, TA.PRODUCT_ID AS ID, SUM(TX_T.QUANTITY) AS T, 'TEST' AS DETAIL
    FROM
        PBMS_TANK_TRANSACTIONS TX_T
    LEFT JOIN PBMS_TANK_TABLE TA ON TA.PK_TANK_ID = TX_T.TANK_ID
    WHERE
        TX_T.TRANS_TYPE = 'TEST'
            AND TA.PRODUCT_ID > 0 AND TA.PRODUCT_ID <5
            AND TX_T.DATE >= :START
            AND TX_T.DATE <= :END
    GROUP BY TX_T.DATE, TA.PRODUCT_ID) AS TRX
    ON TRX.DATE=DATES.DATE
    LEFT JOIN PBMS_PRODUCT_TABLE PT ON PT.PK_PRODUCT_ID=TRX.ID
        ]]>
    </sql-query>
    <sql-query name="fuelsStockSummary">
        <![CDATA[
SELECT
    TRX.DATE DATE, DATE_FORMAT(FROM_DAYS(TRX.DATE), '%d %b') AS DATE_TEXT, TRX.ID, TRX.T VALUE, CONCAT(CONVERT(CAST(CONVERT(PT.PRODUCT_NAME USING latin1) AS BINARY) using utf8), " ", TRX.DETAIL) DETAIL
FROM
    (
SELECT
        TX_T.DATE AS DATE, TA.PRODUCT_ID AS ID, SUM(TX_T.QUANTITY) AS T, 'TEST' AS DETAIL
    FROM
        PBMS_TANK_TRANSACTIONS TX_T
    LEFT JOIN PBMS_TANK_TABLE TA ON TA.PK_TANK_ID = TX_T.TANK_ID
    WHERE
        TX_T.TRANS_TYPE = 'TEST'
            AND TA.PRODUCT_ID > 0 AND TA.PRODUCT_ID <5
            AND TX_T.DATE >= :START
            AND TX_T.DATE <= :END
    GROUP BY TX_T.DATE, TA.PRODUCT_ID) AS TRX
    LEFT JOIN PBMS_PRODUCT_TABLE PT ON PT.PK_PRODUCT_ID=TRX.ID
        ]]>
    </sql-query>
    <sql-query name="rateChangeHistory">
        <![CDATA[
    SELECT
        MC.PRODUCT_ID PRODUCT_ID, MC.OLD_PRICE OLD_PRICE, MC.DATE DATE,
        P.PRODUCT_NAME,
        MC.STOCK,
        DATE_FORMAT(FROM_DAYS(MC.DATE), '%d %b') AS DATE_TEXT,
        ROUND(CAST(SUBSTRING(MC.COMMENTS, 20) AS DECIMAL (11 , 2 )) / STOCK,2) PRICE_CHANGE,
        CAST(SUBSTRING(MC.COMMENTS, 20) AS DECIMAL (11 , 2 )) AS TOTAL
    FROM
        pbms_product_meter_change MC
            LEFT JOIN
        pbms_product_table P ON MC.PRODUCT_ID = P.PK_PRODUCT_ID
    WHERE
        MC.DATE >= :START AND MC.DATE <= :END
        ]]>
    </sql-query>
    <sql-query name="creditHistoryByParty">
        <![CDATA[
            SELECT MAX_SL.COMPUTED_DATE DATE, DATE_FORMAT(FROM_DAYS(MAX_SL.COMPUTED_DATE), '%d %b') AS DATE_TEXT, PR.PK_PARTY_ID AS ID,
                PR.PARTY_NAME AS DETAIL,
                TR.BALANCE AS VALUE
            FROM (
                (SELECT MAX(TQ.PK_SLNO) AS MAX_SLNO, :START AS COMPUTED_DATE
                FROM PBMS_PARTY_TRANSACTIONS TQ
                WHERE TQ.DATE <= :START
                GROUP BY TQ.PARTY_ID)
                UNION
                (SELECT MAX(TQ.PK_SLNO) AS MAX_SLNO, TQ.DATE AS COMPUTED_DATE
                FROM PBMS_PARTY_TRANSACTIONS TQ
                WHERE TQ.DATE > :START AND TQ.DATE < :END
                GROUP BY TQ.DATE, TQ.PARTY_ID)
                UNION
                (SELECT MAX(TQ.PK_SLNO) AS MAX_SLNO, :END AS COMPUTED_DATE
                FROM PBMS_PARTY_TRANSACTIONS TQ
                WHERE TQ.DATE <= :END
                GROUP BY TQ.PARTY_ID)
                ) AS MAX_SL
            INNER JOIN PBMS_PARTY_TRANSACTIONS AS TR
                ON MAX_SL.MAX_SLNO=TR.PK_SLNO
            LEFT JOIN PBMS_PARTY_TABLE AS PR
                ON TR.PARTY_ID=PR.PK_PARTY_ID
            WHERE (PR.PK_PARTY_ID >= 300 AND PARTY_STATUS LIKE 'ACTIVE')
            ORDER BY TR.DATE, PR.PARTY_NAME;
        ]]>
    </sql-query>
    <sql-query name="salaryHistoryByParty">
        <![CDATA[
            SELECT TR.DATE DATE, DATE_FORMAT(FROM_DAYS(TR.DATE), '%d %b') AS DATE_TEXT, PR.PK_PARTY_ID AS ID,
				PR.PARTY_NAME AS DETAIL,
				TR.AMOUNT AS VALUE
			FROM (
				SELECT MAX(TQ.PK_SLNO) AS MAX_SLNO
				FROM PBMS_PARTY_TRANSACTIONS TQ
				WHERE TQ.DATE >= :START AND TQ.DATE <= :END
				GROUP BY TQ.DATE, TQ.PARTY_ID) AS MAX_SL
			INNER JOIN PBMS_PARTY_TRANSACTIONS AS TR
				ON MAX_SL.MAX_SLNO=TR.PK_SLNO
			LEFT JOIN PBMS_PARTY_TABLE AS PR
				ON TR.PARTY_ID=PR.PK_PARTY_ID
			WHERE (PR.PK_PARTY_ID < 250 AND PARTY_STATUS LIKE 'ACTIVE%')
				AND (PR.PK_PARTY_ID <> 4)
			ORDER BY TR.DATE, PR.PARTY_NAME;
        ]]>
    </sql-query>
    <sql-query name="expenseHistory">
        <![CDATA[
            SELECT TR.DATE DATE, DATE_FORMAT(FROM_DAYS(TR.DATE), '%d %b') AS DATE_TEXT, PR.PK_PARTY_ID AS ID,
				PR.PARTY_NAME AS DETAIL,
				TR.AMOUNT AS VALUE
			FROM (
				SELECT MAX(TQ.PK_SLNO) AS MAX_SLNO
				FROM PBMS_PARTY_TRANSACTIONS TQ
				WHERE TQ.DATE >= :START AND TQ.DATE <= :END
				GROUP BY TQ.DATE, TQ.PARTY_ID) AS MAX_SL
			INNER JOIN PBMS_PARTY_TRANSACTIONS AS TR
				ON MAX_SL.MAX_SLNO=TR.PK_SLNO
			LEFT JOIN PBMS_PARTY_TABLE AS PR
				ON TR.PARTY_ID=PR.PK_PARTY_ID
			WHERE (PR.PK_PARTY_ID = 4)
			ORDER BY TR.DATE, PR.PARTY_NAME;
        ]]>
    </sql-query>
</hibernate-mapping>
